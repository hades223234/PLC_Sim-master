using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Packets
{
    public delegate void Download(byte[] data);
    public enum DownloadState
    {
        requestDownload,
        downloadBlock,
        downloadEnded,
        none
    }

    public enum Service
    {
        PushClient,
        None
    }

    public class S7PacketGenerator
    {
        //public static S7_Engine.Service service = S7_Engine.Service.None;
        public static bool downloaded = false;
        public static event Download Downloaded;
        public static List<byte> downloadBlockData;
        public static bool lockedAccessToDiagData = false;
        public static bool requestDownload = false;
        public static bool requestDiagData = false;
        public static DownloadState downloadState = DownloadState.none;
        public static Service service = Service.None;
        static Time dateTime1;
        static Time dateTime2;
        static Time dateTime3;
        static Time dateTime4;
        static Time dateTime5;
        static Time dateTime6_2;
        static Time dateTime6_1;
        static Time dateTime6;

        static S7PacketGenerator()
        {
            dateTime1 = new Time();
            System.Threading.Thread.Sleep(1);
            dateTime2 = new Time();
            dateTime2.Milisec += 7;
            System.Threading.Thread.Sleep(1);
            dateTime3 = new Time();
            dateTime3.Minute -= 3;
            dateTime3.Milisec += 7;
            dateTime3.Second += 3;
            System.Threading.Thread.Sleep(1);
            dateTime4 = new Time();
            dateTime4.Minute -= 3;
            dateTime4.Milisec += 7;
            dateTime4.Second += 3;
            System.Threading.Thread.Sleep(1);
            dateTime5 = new Time();
            dateTime5.Minute -= 3;
            dateTime5.Milisec += 12;
            dateTime5.Second += 3;
            System.Threading.Thread.Sleep(1);
            dateTime6_2 = new Time();
            dateTime6_2.Minute -= 3;
            dateTime6_2.Milisec += 12;
            dateTime6_2.Second += 15;
            System.Threading.Thread.Sleep(1);
            dateTime6_1 = new Time();
            dateTime6_1.Minute -= 3;
            dateTime6_1.Milisec += 12;
            dateTime6_1.Second += 23;
            System.Threading.Thread.Sleep(1);
            dateTime6 = new Time();
            dateTime6.Minute -= 3;
            dateTime6.Milisec += 12;
            dateTime6.Second += 23;
        }

        static byte[] header = new byte[] { 0x02, 0xf0, 0x80, 0x32 };
        static List<byte> stream = new List<byte>();

        public static void Pack(byte[] data)
        {
            for (int i = 0; i < data.Length; i++)
            {
                stream.Add(data[i]);
            }
        }

        public static void Pack(byte[] data, List<byte> streamToSend)
        {
            for (int i = 0; i < data.Length; i++)
            {
                streamToSend.Add(data[i]);
            }
        }

        public static bool Check(byte[] data)
        {
            bool findedCode = true;

            #region Job



            if (data[8] == 0x01)//Job
            {
                if (data[17] == 0xf0)//Setup communication
                {
                    stream = new List<byte>();
                    Pack(TPKTPacket.Load(0x1b));//27
                    Pack(header);
                    Pack(new byte[] { 0x03, 0x00, 0x00, data[11], data[12], 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0xf0 });
                }
                else if (data[17] == 0x1a)//Request download
                {
                    DownloadInfo.dataDownloaded = new List<byte>();
                    DownloadInfo.firstPartDataSaved = false;
                    DownloadInfo.downloadEnded = false;
                    requestDownload = true;
                    stream = new List<byte>();
                    Pack(TPKTPacket.Load(0x14));//20
                    Pack(header);
                    Pack(new byte[] { 0x03, 0x00, 0x00, data[11], data[12], 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1a });
                    //downloadState = DownloadState.requestDownload;
                    downloadBlockData = new List<byte>();
                    ////if (requestDownload != null)
                    ////{
                    ////    requestDownload();
                    ////} 
                    DownloadInfo.protocolDataUnitReference = 1;
                    byte pdur = Convert.ToByte(DownloadInfo.protocolDataUnitReference);
                    Pack(TPKTPacket.Load(0x23), downloadBlockData);//35
                    Pack(header, downloadBlockData);
                    Pack(
                        new byte[] { 0x01, 0x00, 0x00, pdur, 0x00, 0x00, 0x12, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x5f, 0x30, data[28], data[29], data[30], data[31], data[32], data[33], data[34] },
                        downloadBlockData);                
                }
                else if(data[17] == 0x28)//PLC Control
                {                   
                    stream = new List<byte>();
                    Pack(TPKTPacket.Load(0x14));//20
                    Pack(header);
                    Pack(new byte[] { 0x03, 0x00, 0x00, data[11], data[12], 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x28 });
                    
                }
                else if (data[17] == 0x29)//PLC Stop
                {
                    stream = new List<byte>();
                    Pack(TPKTPacket.Load(0x14));//20
                    Pack(header);
                    Pack(new byte[] { 0x03, 0x00, 0x00, data[11], data[12], 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x29 });
                }
            }
            #endregion

            #region Ack_Data
            else if (data[8] == 0x03)//Ack_Data
            {
                if (data[17] == 0xf0)//Setup communication
                {
                    stream = new List<byte>();
                    Pack(TPKTPacket.Load(0x1b));//27
                    Pack(header);
                    Pack(new byte[] { 0x03, 0x00, 0x00, data[11], data[12], 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0xf0 });
                }
                else if (data[19] == 0x1b)//Download block
                {
                    stream = new List<byte>();
                    
                    DownloadInfo.parameterData = (int)data[20];
                    if (DownloadInfo.parameterData == 0)
                    {
                        byte pdur = Convert.ToByte(DownloadInfo.protocolDataUnitReference);
                        Pack(TPKTPacket.Load(0x23));//35
                        Pack(header);
                        Pack(new byte[] { 0x01, 0x00, 0x00, pdur, 0x00, 0x00, 0x12, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x5f, 0x30, 0x38, 0x30, 0x30, 0x30, 0x30, 0x31, 0x50 });
                        downloaded = true;
                        DownloadInfo.downloadEnded = true;
                    }
                    else if(DownloadInfo.parameterData > 0)
                    {
                        Pack(DownloadBlock().ToArray());                        
                    }
                    DownloadInfo.SaveData(data);
                    DownloadInfo.protocolDataUnitReference++;
                    
                    //Pack(TPKTPacket.Load(0x23));//35
                    //Pack(header);
                    //Pack(new byte[] { 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x12, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x5f, 0x30, data[28], data[29], data[30], data[31], data[32], data[33], data[34] });
                }
                else if (data[19] == 0x1c)
                {
                    findedCode = false;
                    if (Downloaded != null)
                    {
                        Downloaded(DownloadInfo.dataDownloaded.ToArray());
                    }
                    //downloadState = DownloadState.downloadEnded;
                }
                
            }
            #endregion

            #region Userdata
            else if (data[8] == 0x07)//Userdata
            {
                #region Read SZL
                if (data[22] == 0x44 && data[23] == 0x01) //Read SZL
                {
                    #region ID = 0x0000
                    if (data[data.Length - 4] == 0x00 && data[data.Length - 3] == 0x00)
                    {
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x63));//99
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0c, 0x00, 0x46, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0x09, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x1d, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x11, 0x01, 0x11, 0x0f, 0x11, 0x01, 0x12, 0x0f, 0x12, 0x00, 0x13, 0x00, 0x14, 0x00, 0x15, 0x00, 0x19, 0x00, 0x1a, 0x0f, 0x1a, 0x00, 0x1b, 0x0f, 0x1b, 0x00, 0x1c, 0x0f, 0x1c, 0x00, 0x21, 0x02, 0x22, 0x00, 0x23, 0x0f, 0x23, 0x01, 0x24, 0x04, 0x24, 0x01, 0x31, 0x01, 0x32, 0x00, 0x74, 0x01, 0x74, 0x0d, 0x91, 0x00, 0xa0 });
                    }
                    #endregion

                    #region ID = 0x0132
                    else if (data[data.Length - 4] == 0x01 && data[data.Length - 3] == 0x32)
                    {
                        if (data[data.Length - 1] == 0x01)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x51));//81
                            Pack(header);
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x34, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x30, 0x01, 0x32, 0x00, 0x01, 0x00, 0x28, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                        }

                        else if (data[data.Length - 1] == 0x02)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x51));//81
                            Pack(header);
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0c, 0x00, 0x34, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0x09, 0x00, 0x30, 0x01, 0x32, 0x00, 0x02, 0x00, 0x28, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                        }

                        else if (data[data.Length - 1] == 0x04)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x51));//81
                            Pack(header);
                            //When PLC is RUN//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0c, 0x00, 0x34, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0x09, 0x00, 0x30, 0x01, 0x32, 0x00, 0x04, 0x00, 0x28, 0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x56, 0x56, 0x5e, 0x01, 0x46, 0x57, 0x56, 0x1f, 0x21, 0xe4, 0x02, 0x00, 0x43, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            //When PLC is STOP/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            //Pack(new byte[] { 7, 0, 0, data[11], data[12], 0, 12, 0, 52, 0, 1, 18, 8, 18, 132, 1, 1, 0, 0, 0, 0, 255, 9, 0, 48, 1, 50, 0, 4, 0, 40, 0, 1, 0, 4, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 86, 86, 94, 1, 70, 87, 86, 31, 33, 228, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 });
                            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        }

                        else if (data[data.Length - 1] == 0x06)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x21));//33
                            Pack(header);
                            //When PLC is RUN//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0xD4, 0x02, 0x0A, 0x00, 0x00, 0x00 });
                            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        }

                        else if (data[data.Length - 1] == 0x08)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x5B));//91
                            Pack(header);
                            //When PLC is RUN//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x3E, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x3A, 0x01, 0x32, 0x00, 0x08, 0x00, 0x28, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x11, 0x08, 0x18, 0x36, 0x12, 0x47, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        }

                        else if (data[data.Length - 1] == 0x09)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x51));//81
                            Pack(header);
                            //When PLC is RUN//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x34, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x30, 0x01, 0x32, 0x00, 0x09, 0x00, 0x28, 0x00, 0x01, 0x00, 0x09, 0x00, 0x02, 0xDC, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        }

                        else if (data[data.Length - 1] == 0x0b)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x51));//81
                            Pack(header);
                            //When PLC is RUN//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x34, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x30, 0x01, 0x32, 0x00, 0x0B, 0x00, 0x28, 0x00, 0x01, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        }

                        else if (data[data.Length - 1] == 0x0c)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x21));//33
                            Pack(header);
                            //When PLC is RUN//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0xD4, 0x02, 0x0A, 0x00, 0x00, 0x00 });
                            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        }
                    }
                    #endregion

                    #region ID = 0x0131
                    else if (data[data.Length - 4] == 0x01 && data[data.Length - 3] == 0x31)
                    {
                        if (data[data.Length - 1] == 0x01)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x51));
                            Pack(header);
                            Pack(new byte[] { 7, 0, 0, data[11], data[12], 0x00, 0x0C, 0x00, 0x34, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x30, 0x01, 0x31, 0x00, 0x01, 0x00, 0x28, 0x00, 0x01, 0x00, 0x01, 0x00, 0xF0, 0x00, 0x10, 0x00, 0x02, 0xDC, 0x6C, 0x00, 0x02, 0xDC, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                        }
                        else if (data[data.Length - 1] == 0x02)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x51));//81
                            Pack(header);
                            Pack(new byte[] { 7, 0, 0, data[11], data[12], 0, 12, 0, 52, 0, 1, 18, 8, 18, 132, 1, 1, 0, 0, 0, 0, 255, 9, 0, 48, 1, 49, 0, 2, 0, 40, 0, 1, 0, 2, 190, 253, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 1, 0, 0, 0, 0, 125, 0, 0, 5, 3, 4, 0, 0, 0, 0, 0, 12, 0, 10, 0, 0, 0, 9, 0, 0 });
                        }
                        else if (data[data.Length - 1] == 0x04)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x51));//81
                            Pack(header);
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0c, 0x00, 0x34, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0x09, 0x00, 0x30, 0x01, 0x31, 0x00, 0x04, 0x00, 0x28, 0x00, 0x01, 0x00, 0x04, 0x01, 0x01, 0x62, 0x41, 0x63, 0x00, 0x1e, 0x00, 0x01, 0x01, 0x01, 0x04, 0x02, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                        }
                        else if (data[data.Length - 1] == 0x06)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x51));//81
                            Pack(header);
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x34, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x30, 0x01, 0x31, 0x00, 0x06, 0x00, 0x28, 0x00, 0x01, 0x00, 0x06, 0xF3, 0x00, 0x00, 0xF8, 0x01, 0xF0, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x0E, 0x00, 0x4C, 0x20, 0x00, 0x05, 0xC0, 0x00, 0x00, 0x00, 0x00 });
                        }
                        else if (data[data.Length - 1] == 0x09)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x51));//81
                            Pack(header);
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x34, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x30, 0x01, 0x31, 0x00, 0x09, 0x00, 0x28, 0x00, 0x01, 0x00, 0x09, 0x04, 0x06, 0x01, 0x00, 0x01, 0xF7, 0x01, 0xF7, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                        }
                    }
                    #endregion

                    #region ID = 0x0222
                    else if (data[data.Length - 4] == 0x02 && data[data.Length - 3] == 0x22)
                    {
                        if (data[data.Length - 2] == 0x00 && data[data.Length - 1] == 0x01)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x45));//69
                            Pack(header);
                            Pack(new byte[] { 7, 0, 0, data[11], data[12], 0x00, 0x0C, 0x00, 0x28, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x24, 0x02, 0x22, 0x00, 0x01, 0x00, 0x1C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x5A, 0x15, 0x11, 0x08, 0x18, 0x36, 0x09, 0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                        }
                        else if (data[data.Length - 2] == 0x00 && data[data.Length - 1] == 0x50)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x45));//69
                            Pack(header);
                            Pack(new byte[] { 7, 0, 0, data[11], data[12], 0x00, 0x0C, 0x00, 0x28, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x24, 0x02, 0x22, 0x00, 0x50, 0x00, 0x1C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                        }
                        else if (data[data.Length - 2] == 0x50 && data[data.Length - 1] == 0x50)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x21));//33
                            Pack(header);
                            Pack(new byte[] { 7, 0, 0, data[11], data[12], 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0xD4, 0x02, 0x0A, 0x00, 0x00, 0x00 });
                        }
                    }
                    #endregion

                    #region ID = 0x0232
                    else if (data[data.Length - 4] == 0x02 && data[data.Length - 3] == 0x32)
                    {
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x21));//33
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0xD4, 0x02, 0x0A, 0x00, 0x00, 0x00 });
                    }
                    #endregion

                    #region ID = 0x0424
                    else if (data[data.Length - 4] == 0x04 && data[data.Length - 3] == 0x24)
                    {
                        if (data[data.Length - 1] == 0x00)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x3d));//61
                            Pack(header);
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x20, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x1C, 0x04, 0x24, 0x00, 0x00, 0x00, 0x14, 0x00, 0x01, 0x51 });

                            //When PLC is RUN///////////////////////////////////////
                            Pack(new byte[] { 0x40, 0xFF, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                            ////////////////////////////////////////////////////////

                            //When PLC is STOP////////////////////////////////////////
                            //Pack(new byte[] { 0x0B,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x77,0x00 });
                            //////////////////////////////////////////////////////////

                            Time dt = new Time();
                            Pack(new byte[] { dt.Year, dt.Month, dt.Day, dt.Hour, dt.Minute, dt.Second, dt.Milisec, 0 });
                        }

                        else if (data[data.Length - 1] == 0x04)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x3d));//61
                            Pack(header);
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x20, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x1C, 0x04, 0x24, 0x00, 0x04, 0x00, 0x14, 0x00, 0x01, 0x51 });

                            //When PLC is RUN///////////////////////////////////////
                            Pack(new byte[] { 0x44, 0xFF, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                            ////////////////////////////////////////////////////////

                            //When PLC is STOP////////////////////////////////////////
                            //Pack(new byte[] { 0x0B,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,0x10,0x77,0x10 });
                            //////////////////////////////////////////////////////////

                            Time dt = new Time();
                            Pack(new byte[] { dt.Year, dt.Month, dt.Day, dt.Hour, dt.Minute, dt.Second, dt.Milisec, 0 });
                        }
                    }
                    #endregion

                    

                    #region ID = 0x0011
                    else if (data[data.Length - 4] == 0x00 && data[data.Length - 3] == 0x11)
                    {
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x7d));//125
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x60, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x5C, 0x00, 0x11, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x03, 0x00, 0x01 });
                        byte[] ba = Encoding.Default.GetBytes(PLCInfo.OrderNumber);
                        Pack(ba);
                        //Type: 6ES7 312-5BE03-0AB0
                        //Pack(new byte[] { 0x36, 0x45, 0x53, 0x37, 0x20, 0x33, 0x31, 0x32, 0x2D, 0x35, 0x42, 0x45, 0x30, 0x33, 0x2D, 0x30, 0x41, 0x42, 0x30, 0x20 });
                        Pack(new byte[] {0x20, 0x00, 0xC0, 0x00, 0x01, 0x00, 0x01, 0x00, 0x06 });
                        //Type: 6ES7 312-5BE03-0AB0  
                        Pack(ba);
                        //Pack(new byte[] { 0x36, 0x45, 0x53, 0x37, 0x20, 0x33, 0x31, 0x32, 0x2D, 0x35, 0x42, 0x45, 0x30, 0x33, 0x2D, 0x30, 0x41, 0x42, 0x30, 0x20 });
                        Pack(new byte[] {0x20, 0x00, 0xC0, 0x00, 0x01, 0x00, 0x01, 0x00, 0x07 });
                        //Symulator PLC
                        Pack(new byte[] { 0x53, 0x79, 0x6D, 0x75, 0x6C, 0x61, 0x74, 0x6F, 0x72, 0x20, 0x50, 0x4C, 0x43, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 });
                        Pack(new byte[] { 0x00, 0xC0, 0x56, 0x02, 0x06, 0x00 });
                    }
                    #endregion

                    #region NEW ID = 0x0014
                    else if (data[data.Length - 4] == 0x00 && data[data.Length - 3] == 0x14)
                    {
                        //stream = new List<byte>();
                        //Pack(TPKTPacket.Load(0x69));//
                        //Pack(header);
                        //Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x4C, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x48, 0x00, 0x14, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x01, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x07, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x09, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00 });
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x49));//
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x2c, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x28, 0x00, 0x14, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 
                            0x00, 0x01, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00,
                            0x00, 0x02, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 
                            0x00, 0x03, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00,
                        //0x00, 0x04, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00,
                        //0x00, 0x05, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00,
                            0x00, 0x07, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00,
                            //0x00, 0x08, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 
                            //0x00, 0x09, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00
                        });
                    }
                    #endregion

                    #region NEW ID = 0x001a
                    else if (data[data.Length - 4] == 0x00 && data[data.Length - 3] == 0x1a)
                    {
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x4D));//77
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00,0x0C,0x00,0x30,0x00,0x01,0x12,0x08,0x12,0x84,0x01,0x01,0x00,0x00,0x00,0x00,0xFF,0x09,0x00,0x2C,0x00,0x1A,0x00,0x00,0x00,0x0C,0x00,0x03,0x09,0x01,0x01,0x05,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x12,0x01,0x00,0x02,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x18,0x01,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 });                        
                    }
                    #endregion

                    #region NEW ID = 0x001b
                    else if (data[data.Length - 4] == 0x00 && data[data.Length - 3] == 0x1b)
                    {
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0xA1));//161
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x84, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x80, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x14, 0x00, 0x06, 0x09, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDE, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x70, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x22, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDE, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x22, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                    }
                    #endregion

                    #region ID = 0x001c
                    else if (data[data.Length - 4] == 0x00 && data[data.Length - 3] == 0x1c)
                    {
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0xf7));//247
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0xDA, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0xFF, 0x09, 0x00, 0xD6, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x22, 0x00, 0x09 });

                        //When PLC is RUN//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //Type: S7300/ET200M station_1
                        Pack(new byte[] { 0x00, 0x01, 0x53, 0x37, 0x33, 0x30, 0x30, 0x2F, 0x45, 0x54, 0x32, 0x30, 0x30, 0x4D, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                        //Name: PLC_1
                        Pack(new byte[] { 0x00, 0x02, 0x50, 0x4C, 0x43, 0x5F, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        //When PLC is STOP/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //Type:
                        //Pack(new byte[] { 0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 });
                        //byte[] ba = Encoding.Default.GetBytes(PLCInfo.ShortDesignation);
                        //Name: CPU 315-2 PN/DP
                        //Pack(new byte[] { 0x00,0x02,0x43,0x50,0x55,0x20,0x33,0x31,0x35,0x2D,0x32,0x20,0x50,0x4E,0x2F,0x44,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 });
                        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        Pack(new byte[] { 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04 });
                        //Program name: Wojciech Krzysztofowicz
                        byte[] programName = Encoding.Default.GetBytes("Wojciech Krzysztofowicz");
                        Pack(programName);
                        Pack(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05 });
                        
                        //Program name: Symulator PLC
                        byte[] programName2 = Encoding.Default.GetBytes("Symulator PLC");
                        Pack(programName2);
                        Pack(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                        Pack(new byte[] { 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08 });
                    }
                    #endregion

                    #region NEW ID = 0x0021
                    else if (data[data.Length - 4] == 0x00 && data[data.Length - 3] == 0x21)
                    {
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x71));//113
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x54, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x50, 0x00, 0x21, 0x00, 0x00, 0x00, 0x04, 0x00, 0x12, 0x01, 0x01, 0x01, 0x01, 0x01, 0x11, 0x02, 0x0A, 0x01, 0x21, 0x03, 0x14, 0x01, 0x36, 0x0C, 0x23, 0x01, 0x41, 0x10, 0x28, 0x01, 0x55, 0x02, 0x37, 0x01, 0x56, 0x02, 0x38, 0x01, 0x57, 0x02, 0x39, 0x01, 0x64, 0x19, 0x3D, 0x00, 0x01, 0x1A, 0x50, 0x00, 0x42, 0x1A, 0x52, 0x00, 0x61, 0x1A, 0x53, 0x00, 0xA1, 0x1A, 0x55, 0x00, 0xC1, 0x1A, 0x56, 0x00, 0xD2, 0x1A, 0x57, 0x00, 0x81, 0x01, 0x64, 0x00, 0x21, 0xFE, 0x79, 0x00, 0x42, 0xFE, 0x7A });
                    }
                    #endregion

                    #region NEW ID = 0x0112
                    else if (data[data.Length - 4] == 0x01 && data[data.Length - 3] == 0x12)
                    {
                        if (data[data.Length - 2] == 0x01 && data[data.Length - 1] == 0x00)
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x2D));//45
                            Pack(header);
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x10, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x0C, 0x01, 0x12, 0x01, 0x00, 0x00, 0x02, 0x00, 0x02, 0x01, 0x01, 0x01, 0x04 });
                        }
                    }
                    #endregion

                    #region ID = 0x0124
                    else if (data[data.Length - 4] == 0x01 && data[data.Length - 3] == 0x24)
                    {
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x3d));//61
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x20, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x1C, 0x01, 0x24, 0x00, 0x00, 0x00, 0x14, 0x00, 0x01 });

                        //When PLC is RUN/////////////////////////////////////////////////////////
                        Pack(new byte[] { 0x43, 0x02, 0xFF, 0x68, 0xC7, 0x00, 0x00, 0x00, 0x08, 0x14, 0x77, 0x14 });
                        /////////////////////////////////////////////////////////////////////////

                        //When PLC is STOP/////////////////////////////////////////////////////////
                        //Pack(new byte[] { 0x43,0x04,0xFF,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 });
                        /////////////////////////////////////////////////////////////////////////

                        Time dt = new Time();
                        Pack(new byte[] { dt.Year, dt.Month, dt.Day, dt.Hour, dt.Minute, dt.Second, dt.Milisec, 0 });
                    }
                    #endregion

                    #region ID = 0x0015
                    else if (data[data.Length - 4] == 0x00 && data[data.Length - 3] == 0x15)
                    {
                        //stream = new List<byte>();
                        //Pack(TPKTPacket.Load(0x5b));//91
                        //Pack(header);
                        //Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x3E, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x3A, 0x00, 0x15, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x05, 0x08, 0x00, 0x00, 0x12, 0x03, 0xD1, 0x00, 0x00, 0x40, 0x24, 0x0A, 0x00, 0x04, 0x00, 0x03, 0xD1, 0x00, 0x00, 0x40, 0x24, 0x0B, 0x00, 0x01, 0x22, 0x03, 0xD1, 0x00, 0x00, 0x40, 0x24, 0x0C, 0x00, 0x08, 0x00, 0x03, 0xD1, 0x00, 0x00, 0x40, 0x24, 0x0E, 0x00, 0x08, 0x00, 0x03, 0xD1, 0x00, 0x00, 0x40, 0x24 });
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x33));//91
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x16, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x12, 0x00, 0x15, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x01, 0x08, 0x00, 0x00, 0x12, 0x03, 0xD1, 0x00, 0x00, 0x40, 0x24 });
                         
                    }
                    #endregion

                    #region ID = 0x0019
                    else if (data[data.Length - 4] == 0x00 && data[data.Length - 3] == 0x19)
                    {
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x41));//65
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x24, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x20, 0x00, 0x19, 0x00, 0x00, 0x00, 0x04, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00 });
                        //When PLC is RUN//////////////////////////////////////////////////////////////////
                        Pack(new byte[] { 0x00, 0x04, 0x01/*LED-ID:RUN(0,1)*/, 0x00, 0x00, 0x05, 0x00/*LED-ID:STOP(0,1)*/, 0x00 });
                        ///////////////////////////////////////////////////////////////////////////////////

                        //When PLC is STOP/////////////////////////////////////////////////////////////////
                        //Pack(new byte[] { 0x00, 0x04, 0x00/*LED-ID:RUN(0,1)*/, 0x00, 0x00, 0x05, 0x01/*LED-ID:STOP(0,1)*/, 0x00 });
                        ///////////////////////////////////////////////////////////////////////////////////

                        Pack(new byte[] { 0x00, 0x06, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00 });
                    }
                    #endregion

                    #region ID = 0x0d91
                    else if (data[data.Length - 4] == 0x0d && data[data.Length - 3] == 0x91)
                    {
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x39));//57
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x1C, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x18, 0x0D, 0x91, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x7F, 0xFF, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0x00, 0xB4, 0x02, 0x00, 0x11 });
                    }
                    #endregion

                    #region ID = 0x0074
                    else if (data[data.Length - 4] == 0x00 && data[data.Length - 3] == 0x74)
                    {
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x41));//65
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x24, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x20, 0x00, 0x74, 0x00, 0x00, 0x00, 0x04, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00 });

                        //When PLC is RUN//////////////////////////////////////////////////////////////////
                        Pack(new byte[] { 0x00, 0x04, 0x01/*LED-ID:RUN(0,1)*/, 0x00, 0x00, 0x05, 0x00/*LED-ID:STOP(0,1)*/, 0x00 });
                        ///////////////////////////////////////////////////////////////////////////////////

                        //When PLC is STOP/////////////////////////////////////////////////////////////////
                        //Pack(new byte[] { 0x00, 0x04, 0x00/*LED-ID:RUN(0,1)*/, 0x00, 0x00, 0x05, 0x01/*LED-ID:STOP(0,1)*/, 0x00 });
                        ///////////////////////////////////////////////////////////////////////////////////

                        Pack(new byte[] { 0x00, 0x06, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00 });
                    }
                    #endregion

                    #region ID = 0x00a0
                    else if (data[data.Length - 4] == 0x00 && data[data.Length - 3] == 0xa0)
                    {
                        //RUN//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0xc9));//181//Zmienić
                        Pack(header);


                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0xac, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0xa8, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x14, 0x00, 0x08 });
                        Pack(new byte[] { 0x43, 0x02, 0xFF, 0x68, 0xc7, 0x00, 0x00, 0x00, 0x08, 0x13, 0x77, 0x13, dateTime6.Year, dateTime6.Month, dateTime6.Day, dateTime6.Hour, dateTime6.Minute, dateTime6.Second, dateTime6.Milisec, 0 });
                        Pack(new byte[] { 0x00, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, dateTime6.Year, dateTime6.Month, dateTime6.Day, dateTime6.Hour, dateTime6.Minute, dateTime6.Second, dateTime6.Milisec, 0 });
                        /*Dodane*/
                        Pack(new byte[] { 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, dateTime6_1.Year, dateTime6_1.Month, dateTime6_1.Day, dateTime6_1.Hour, dateTime6_1.Minute, dateTime6_1.Second, dateTime6_1.Milisec, 0 });
                        /*Dodane*/
                        Pack(new byte[] { 0x00, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, dateTime6_2.Year, dateTime6_2.Month, dateTime6_2.Day, dateTime6_2.Hour, dateTime6_2.Minute, dateTime6_2.Second, dateTime6_2.Milisec, 0 });
                        Pack(new byte[] { 0x00, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, dateTime5.Year, dateTime5.Month, dateTime5.Day, dateTime5.Hour, dateTime5.Minute, dateTime5.Second, dateTime5.Milisec, 0 });
                        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        //STOP//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //stream = new List<byte>();
                        //Pack(TPKTPacket.Load(0x8d));//141
                        //Pack(header);


                        //Pack(new byte[] { 0x07,0x00,0x00, data[11], data[12], 0x00,0x0C,0x00,0x70,0x00,0x01,0x12,0x08,0x12,0x84,0x01,0x01,0x00,0x00,0x00,0x00,0xFF,0x09,0x00,0x6C,0x00,0xA0,0x00,0x00,0x00,0x14,0x00,0x05 });
                        //Pack(new byte[] { 0x00, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, dt4.Year, dt4.Month, dt4.Day, dt4.Hour, dt4.Minute, dt4.Second, dt4.Milisec, 0 });
                        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        //Pack(new byte[] { 0x00, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, dateTime4.Year, dateTime4.Month, dateTime4.Day, dateTime4.Hour, dateTime4.Minute, dateTime4.Second, dateTime4.Milisec, 0 });
                        Pack(new byte[] { 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, dateTime3.Year, dateTime3.Month, dateTime3.Day, dateTime3.Hour, dateTime3.Minute, dateTime3.Second, dateTime3.Milisec, 0 });
                        Pack(new byte[] { 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, dateTime2.Year, dateTime2.Month, dateTime2.Day, dateTime2.Hour, dateTime2.Minute, dateTime2.Second, dateTime2.Milisec, 0 });
                        Pack(new byte[] { 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, dateTime1.Year, dateTime1.Month, dateTime1.Day, dateTime1.Hour, dateTime1.Minute, dateTime1.Second, dateTime1.Milisec, 0 });
                    }
                    #endregion

                    else if (data[20] == 0x08 && data[24] == 0x01)
                    {
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x85));//133
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x68, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                    }

                    //else if (data[20] == 8 && data[24] == 1)
                    //{
                    //    stream = new List<byte>();
                    //    Pack(TPKTPacket.Load(133));
                    //    Pack(header);
                    //    Pack(new byte[] { 7, 0, 0, data[11], data[12], 0, 12, 0, 104, 0, 1, 18, 8, 18, 132, 1, 1, 1, 0, 0, 0, 255, 9, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 });
                    //}
                }
                #endregion

                #region Message service
                else if (data[22] == 0x44 && data[23] == 0x02)//Message service
                {
                    if (data[29] == 0)
                    {
                        //service = S7_Engine.Service.PopClient;
                        //System.Diagnostics.Debug.WriteLine("SetPop");
                    }
                    else if (data[29] == 1)
                    {
                        //service = Service.PushClient;
                        //System.Diagnostics.Debug.WriteLine("SetPush");
                    }
                    stream = new List<byte>();
                    Pack(TPKTPacket.Load(0x23));//35
                    Pack(header);
                    //When PLC is RUN//////////////////////////////////////////////////////////////////////////////////////////////////
                    Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x06, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x02, 0x02, 0x00 });
                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                    //When PLC is STOP/////////////////////////////////////////////////////////////////////////////////////////////////
                    //Pack(new byte[] { 7, 0, 0, data[11], data[12], 0, 12, 0, 6, 0, 1, 18, 8, 18, 132, 2, 2, 0, 0, 0, 0, 255, 9, 0, 2, 0, 0 });
                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }
                #endregion

                #region Programmer commands
                else if (data[22] == 0x41)//Programmer commands
                {
                    if (data[23] == 0x10)//Forces
                    {
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x2d));//45
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0c, 0x00, 0x10, 0x00, 0x01, 0x12, 0x08, 0x12, 0x81, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0x09, 0x00, 0x0c, 0x00, 0x04, 0x00, 0x04, 0x01, 0x00, 0x00, 0x01, 0x10, 0x01, 0x00, 0x00 });
                    }
                    else if (data[23] == 0x01)//Request diag data (Type 1)
                    {
                        DiagnosticData.startAddressAWL = data[62];
                        DiagnosticData.stepAddressCounter = data[64];
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x21));//33
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x04, 0x00, 0x01, 0x12, 0x08, 0x12, 0x81, 0x01, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00 });
                    }
                    else if (data[23] == 0x0f)//Remove diag data
                    {
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x21));//33
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x04, 0x00, 0x01, 0x12, 0x08, 0x12, 0x81, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00 });
                    }
                    else if (data[23] == 0x0e)//Read diag data
                    {
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x21));//33
                        Pack(header);
                        Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x04, 0x00, 0x01, 0x12, 0x08, 0x12, 0x81, 0x0E, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00 });
                        requestDiagData = true;
                    }
                }
                #endregion

                #region Block functions
                else if (data[22] == 0x43)//Block functions
                {
                    if (data[23] == 0x01)//List blocks
                    {
                        //RUN,STOP!!!
                        stream = new List<byte>();
                        Pack(TPKTPacket.Load(0x3d));//61
                        Pack(header);
                        //if (downloaded)
                        //{
                        //    Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0c, 0x00, 0x20, 0x00, 0x01, 0x12, 0x08, 0x12, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x09, 0x00, 0x1c, 0x30, 0x38, 0x00, 0x01/*tutaj 1 po wgraniu bloku OB*/, 0x30, 0x45, 0x00, 0x00, 0x30, 0x43, 0x00, 0x00, 0x30, 0x41, 0x00, 0x00, 0x30, 0x42, 0x00, 0x07/*STOP:0*/, 0x30, 0x44, 0x00, 0x17, 0x30, 0x46, 0x00, 0x08 });
                        //}
                        //else
                        //{
                        //    Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0c, 0x00, 0x20, 0x00, 0x01, 0x12, 0x08, 0x12, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x09, 0x00, 0x1c, 0x30, 0x38, 0x00, 0x00/*tutaj 1 po wgraniu bloku OB*/, 0x30, 0x45, 0x00, 0x00, 0x30, 0x43, 0x00, 0x00, 0x30, 0x41, 0x00, 0x00, 0x30, 0x42, 0x00, 0x07/*STOP:0*/, 0x30, 0x44, 0x00, 0x17, 0x30, 0x46, 0x00, 0x08 });
                        //}
                        
                        if (downloaded)
                        {
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0c, 0x00, 0x20, 0x00, 0x01, 0x12, 0x08, 0x12, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x09, 0x00, 0x1c, 0x30, 0x38, 0x00, 0x01/*tutaj 1 po wgraniu bloku OB*/, 0x30, 0x45, 0x00, 0x00, 0x30, 0x43, 0x00, 0x00, 0x30, 0x41, 0x00, 0x00, 0x30, 0x42, 0x00, 0x07/*STOP:0*/, 0x30, 0x44, 0x00, 0x00, 0x30, 0x46, 0x00, 0x00 });
                        }
                        else
                        {
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0c, 0x00, 0x20, 0x00, 0x01, 0x12, 0x08, 0x12, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x09, 0x00, 0x1c, 0x30, 0x38, 0x00, 0x00/*tutaj 1 po wgraniu bloku OB*/, 0x30, 0x45, 0x00, 0x00, 0x30, 0x43, 0x00, 0x00, 0x30, 0x41, 0x00, 0x00, 0x30, 0x42, 0x00, 0x07/*STOP:0*/, 0x30, 0x44, 0x00, 0x00, 0x30, 0x46, 0x00, 0x00 });
                        }
                    }

                    else if (data[23] == 0x02)//List blocks of type
                    {
                        if (data[data.Length - 1] == 0x42)//Type: SDB
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x3d));//61
                            Pack(header);
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x20, 0x00, 0x01, 0x12, 0x08, 0x12, 0x83, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x1C, 0x00, 0x00, 0x22, 0x11, 0x00, 0x01, 0x22, 0x11, 0x00, 0x03, 0x22, 0x11, 0x00, 0x04, 0x22, 0x11, 0x00, 0x05, 0x22, 0x11, 0x00, 0x96, 0x22, 0x11, 0x03, 0xED, 0x22, 0x11 });
                        }

                        else if (data[data.Length - 1] == 0x44)//Type: SFC
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x7d));//125
                            Pack(header);
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x60, 0x00, 0x01, 0x12, 0x08, 0x12, 0x83, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x5C, 0x00, 0x00, 0x42, 0x01, 0x00, 0x01, 0x42, 0x01, 0x00, 0x02, 0x42, 0x01, 0x00, 0x03, 0x42, 0x01, 0x00, 0x04, 0x42, 0x01, 0x00, 0x14, 0x42, 0x01, 0x00, 0x15, 0x42, 0x01, 0x00, 0x16, 0x42, 0x01, 0x00, 0x17, 0x42, 0x01, 0x00, 0x18, 0x42, 0x01, 0x00, 0x19, 0x42, 0x01, 0x00, 0x1A, 0x42, 0x01, 0x00, 0x1B, 0x42, 0x01, 0x00, 0x1C, 0x42, 0x01, 0x00, 0x1D, 0x42, 0x01, 0x00, 0x1E, 0x42, 0x01, 0x00, 0x1F, 0x42, 0x01, 0x00, 0x20, 0x42, 0x01, 0x00, 0x21, 0x42, 0x01, 0x00, 0x2B, 0x42, 0x01, 0x00, 0x2E, 0x42, 0x01, 0x00, 0x2F, 0x42, 0x01, 0x00, 0x40, 0x42, 0x01 });
                        }

                        else if (data[data.Length - 1] == 0x46)//Type: SFB
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x41));//65
                            Pack(header);
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x24, 0x00, 0x01, 0x12, 0x08, 0x12, 0x83, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x20, 0x00, 0x00, 0x42, 0x01, 0x00, 0x01, 0x42, 0x01, 0x00, 0x02, 0x42, 0x01, 0x00, 0x03, 0x42, 0x01, 0x00, 0x04, 0x42, 0x01, 0x00, 0x05, 0x42, 0x01, 0x00, 0x20, 0x42, 0x01, 0x00, 0x2F, 0x42, 0x01 });
                        }

                        else if (data[data.Length - 1] == 0x38)//Type: OB
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x25));//37
                            Pack(header);
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x08, 0x00, 0x01, 0x12, 0x08, 0x12, 0x83, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x04, 0x00, 0x01, 0x12, 0x01 });
                        }
                    }

                    else if (data[23] == 0x03)//Get block info
                    {
                        if (data[30] == 0x42)//Type:SDB                        
                        {
                            stream = new List<byte>();
                            Pack(TPKTPacket.Load(0x6f));//111
                            Pack(header);
                            byte BlockNumber = Convert.ToByte((data[data.Length - 2] - 48));
                            Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x52, 0x00, 0x01, 0x12, 0x08, 0x12, 0x83, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x4E, 0x01, 0x00, 0x00, 0x4A, 0x22, 0x00, 0x70, 0x70, 0x03, 0x02, 0x07, 0x0B, 0x00, BlockNumber, 0x00, 0x00, 0x02, 0x8A, 0x80, 0x00, 0x00, 0x00, 0x03, 0xC4, 0xEB, 0x88, 0x2D, 0x64, 0x04, 0xEF, 0x6D, 0x80, 0x12, 0x2C, 0x00, 0x00, 0x02, 0x0A, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                        }

                        else if (data[30] == 0x38)//Type:OB
                        {
                            if (downloaded)
                            {
                                stream = new List<byte>();
                                Pack(TPKTPacket.Load(0x6f));//111
                                Pack(header);
                                Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x52, 0x00, 0x01, 0x12, 0x08, 0x12, 0x83, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, 0x4E, 0x01, 0x00, 0x00, 0x4A, 0x22, 0x00, 0x70, 0x70, 0x01, 0x01 });
                                
                                byte[] tmp = DownloadInfo.GetDownloadInfo();

                                Pack(tmp);
                                Pack(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                            }
                            else
                            {

                                //Before download//////////////////////////////////////////////////////////////////////////////////////////////
                                stream = new List<byte>();
                                Pack(TPKTPacket.Load(0x21));//33
                                Pack(header);
                                Pack(new byte[] { 0x07, 0x00, 0x00, data[11], data[12], 0x00, 0x0C, 0x00, 0x04, 0x00, 0x01, 0x12, 0x08, 0x12, 0x83, 0x03, 0x00, 0x00, 0x00, 0xD2, 0x09, 0x0A, 0x00, 0x00, 0x00 });
                            }
                            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        }
                    }
                }
                #endregion
            }
            #endregion

            else
            {
                findedCode = false;
            }

            return findedCode;
        }

        public static List<byte> GetDataToSend()
        {
            return stream;
        }

        public static List<byte> Push()
        {
            stream = new List<byte>();
            Pack(TPKTPacket.Load(25));
            Pack(header);
            //When PLC is RUN////////////////////////////////////////////////////////
            Pack(new byte[] { 7, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 16, 16, 0, 0, 2, 0 });
            /////////////////////////////////////////////////////////////////////////

            //When PLC is STOP///////////////////////////////////////////////////////
            //Pack(new byte[] { 7, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 16, 16, 0, 0, 0, 0 });
            /////////////////////////////////////////////////////////////////////////
            return stream;
        }
        
        public static List<byte> PushRequestDiagData()
        {
            while (!lockedAccessToDiagData) ;
            return DiagnosticData.diagnosticData;
        }

        public static void CreateDiagData(List<byte> data)
        {
            if (requestDiagData && !lockedAccessToDiagData)
            {
                var dataToSend = DiagnosticData.GetDiagDataToSend(data);
                int lengthData = dataToSend.Count;
                int lengthMessage = 0x29 + lengthData;
                DiagnosticData.diagnosticData = new List<byte>();
                Pack(TPKTPacket.Load(lengthMessage), DiagnosticData.diagnosticData);
                Pack(header, DiagnosticData.diagnosticData);
                Pack(
                    new byte[] { 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, Convert.ToByte(0x0c + lengthData), 0x00, 0x01, 0x12, 0x08, 0x12, 0x01, 0x01, 0x3C, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x09, 0x00, Convert.ToByte(0x08 + lengthData), 0x00, 0x04, 0x00, Convert.ToByte(lengthData), 0x01, 0x00, 0x00, 0x01 },
                    DiagnosticData.diagnosticData
                    );
                Pack(dataToSend.ToArray(), DiagnosticData.diagnosticData);
                lockedAccessToDiagData = true;
            }
        }



        public static List<byte> DownloadBlock()
        {            
            downloadBlockData[11] = Convert.ToByte(DownloadInfo.protocolDataUnitReference);
            return downloadBlockData;   
        }

        
    }
}
